name: Secure CI/CD

on:
  push:
    branches: [ release ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: taehun2/bustracker:${{ github.ref_name }}
          build-args: |
            SPRING_PROFILES_ACTIVE=prod
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            MONGODB_URI=${{ secrets.MONGODB_URI }}
            OAUTH_CLIENT_ID=${{ secrets.OAUTH_CLIENT_ID }}
            OAUTH_SECRET_KEY=${{ secrets.OAUTH_SECRET_KEY }}
            UNIV_API_KEY=${{ secrets.UNIV_API_KEY }}
            KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate Webhook Signature
        id: generate-signature
        run: |
          # 배포 데이터 생성
          DEPLOY_DATA=$(cat << EOF
          {
            "image": "taehun2/bustracker:${{ github.ref_name }}",
            "env": {
              "SPRING_PROFILES_ACTIVE": "prod",
              "DATABASE_NAME": "${{ secrets.DATABASE_NAME}}",
              "MONGODB_URI": "${{ secrets.MONGODB_URI }}",
              "OAUTH_CLIENT_ID": "${{ secrets.OAUTH_CLIENT_ID }}",
              "OAUTH_SECRET_KEY": "${{ secrets.OAUTH_SECRET_KEY }}",
              "UNIV_API_KEY": "${{ secrets.UNIV_API_KEY }}",
              "KAKAO_REST_API_KEY": "${{ secrets.KAKAO_REST_API_KEY }}",
              "JWT_SECRET": "${{ secrets.JWT_SECRET }}"
            }
          }
          EOF
          )
          
          # 데이터를 임시 파일에 저장
          echo "$DEPLOY_DATA" > deploy_data.json
          
          # SHA256 서명 생성
          SIGNATURE=$(echo -n "$DEPLOY_DATA" | openssl dgst -sha256 -hmac "${{ secrets.WEBHOOK_SECRET }}" | awk '{print $2}')
          echo "signature=${SIGNATURE}" >> $GITHUB_OUTPUT
          echo "deploy_data=$(cat deploy_data.json)" >> $GITHUB_OUTPUT

      - name: Trigger deployment
        run: |
          curl -X POST "${{ secrets.OFFICE_PC_WEBHOOK_URL }}/deploy" \
            -H "Content-Type: application/json" \
            -H "X-Hub-Signature-256: sha256=${{ steps.generate-signature.outputs.signature }}" \
            -H "User-Agent: GitHub-Actions" \
            --fail \
            --retry 3 \
            --retry-delay 5 \
            --max-time 30 \
            -d '${{ steps.generate-signature.outputs.deploy_data }}'