name: CI/CD

on:
  push:
    branches: [ release ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set Spring Profiles Active
        run: echo "SPRING_PROFILES_ACTIVE=prod" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: taehun2/bustracker:${{ github.ref_name }}
          build-args: |
            SPRING_PROFILES_ACTIVE=prod
            DATABASE_NAME=${{ secrets.DATABASE_NAME}}
            MONGODB_URI=${{ secrets.MONGODB_URI }}
            OAUTH_CLIENT_ID=${{ secrets.OAUTH_CLIENT_ID }}
            OAUTH_SECRET_KEY=${{ secrets.OAUTH_SECRET_KEY }}
            UNIV_API_KEY=${{ secrets.UNIV_API_KEY }}
            KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}

      - name: Trigger deployment
        run: |
          curl -X POST ${{ secrets.OFFICE_PC_WEBHOOK_URL }} \
          -H "Content-Type: application/json" \
          -d '{
            "image": "taehun2/bustracker:${{ github.ref_name }}",
            "env": {
              "SPRING_PROFILES_ACTIVE": "prod",
              "DATABASE_NAME"="${{ secrets.DATABASE_NAME}}"
              "MONGODB_URI"="${{ secrets.MONGODB_URI }}"
              "OAUTH_CLIENT_ID"="${{ secrets.OAUTH_CLIENT_ID }}"
              "OAUTH_SECRET_KEY"="${{ secrets.OAUTH_SECRET_KEY }}"
              "UNIV_API_KEY"="${{ secrets.UNIV_API_KEY }}"
              "KAKAO_REST_API_KEY"=${{ secrets.KAKAO_REST_API_KEY }}"
              "JWT_SECRET"="${{ secrets.JWT_SECRET }}"
            }
          }'

      # 빌드 및 테스트
      #- name: Build and Test with Gradle
        #run: ./gradlew clean build -Dspring.profiles.active=prod
     #   run: ./gradlew clean build
     #   env:
     #     UNIV_API_KEY: ${{ secrets.UNIV_API_KEY }}
     #     kakao-rest-api-key: ${{ secrets.KAKAO_REST_API_KEY }}

     # - name: Upload artifact
     #   uses: actions/upload-artifact@v4
     #   with:
     #     name: app
     #     path: build/libs/*.jar

      # 배포 준비
      #- name: Prepare for deploy
      #  run: |
      #    echo "Preparing for deployment..."
      #    echo "artifact=$(ls ./build/libs)" >> $GITHUB_ENV

      #- name: Get current time
      #  uses: josStorer/get-current-time@v2.0.2
      #  id: current-time
      #  with:
      #    format: YYYY-MM-DDTHH-mm-ss
      #    utcOffset: "+09:00"

      # Elastic Beanstalk 배포
      #- name: Beanstalk Deploy
      #  uses: einaregilsson/beanstalk-deploy@v20
      #  with:
      #    aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #    aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #    application_name: springboot-developer
      #    environment_name: springboot-developer-env
      #    version_label: github-action-${{steps.current-time.outputs.formattedTime}}
      #    region: ap-northeast-2
      #    deployment_package: ./build/libs/${{env.artifact}}